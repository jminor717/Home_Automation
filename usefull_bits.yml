substitutions:
  device_name: base-config

external_components:
  - source:
      type: local
      path: ..\my_components # path relative to Devices folder

esphome:
  name: $device_name
  platformio_options:
    board_build.flash_mode: dio
  includes:
    - GeoGab.h


lambda: |-
  esp_logi("GeoGab", "Timeout: %d", geogab.settings.timeout);


esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 8MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_8MB: y

preferences:
  # the default of 1min is far too short--flash chip is rated
  # for approx 100k writes.
  flash_write_interval: "48h"

api:
  # password: ""
ota:
  platform: esphome
  password: ""

logger:
  level: info

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "$device_name AP"
    password: "BiSG9yrKP394"
captive_portal:

time:
  - platform: homeassistant

button:
  - platform: restart
    name: "$device_name Restart"

text_sensor:
  - platform: version
    name: "$device_name Version"

sensor:
  - { platform: uptime, id: uptime_seconds, update_interval: 1min }
  - { platform: template, id: uptime_days, name: "$device_name uptime", update_interval: 1min, 
      device_class: duration, entity_category: "diagnostic", unit_of_measurement: "d", accuracy_decimals: 2,
      lambda: !lambda "return id(uptime_seconds).state / 86'400;"}


text_sensor:
  - platform: template
    name: "$device_name - Uptime"
    update_interval: 5min
    icon: mdi:clock-start
    lambda: |-
      int seconds = (id(uptime_seconds).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else {
        return { (String(seconds) +"s").c_str() };
      }





web_server:
  version: 3
  sorting_groups:
    - id: sorting_group_time_settings
      name: "Time Settings"
      sorting_weight: 10
    - id: sorting_group_number_settings
      name: "Number settings"
      sorting_weight: 20

datetime:
  - platform: template
    id: my_datetime_time
    type: time
    name: "Pick a Time"
    optimistic: yes
    initial_value: "12:34:56"
    restore_value: false
    web_server:
      sorting_group_id: sorting_group_time_settings

number:
  - platform: template
    id: my_number
    name: "vent speed"
    optimistic: true
    min_value: 20
    max_value: 100
    step: 1
    web_server:
      sorting_group_id: sorting_group_number_settings







# https://community.home-assistant.io/t/retain-switch-states-on-a-power-failure/181602/11
# add a toggle helper with the name esphome_${switch_name}
switch:
  - platform: gpio
    name: 'test plug'
    pin: GPIO10
    id: plg_1
    on_turn_on:
     - homeassistant.service:
        action: input_boolean.turn_on
        data:
         entity_id: input_boolean.esphome_${switch_name}
    on_turn_off:
     - homeassistant.service:
        action: input_boolean.turn_off
        data:
         entity_id: input_boolean.esphome_${switch_name}



binary_sensor:
  - platform: homeassistant
    entity_id: input_boolean.esphome_${switch_name}
    id: esphome_${switch_name}
  - platform: status
    id: connection_status
    on_state:
      then:
        - delay: 3s
        - if:
            condition:
              - binary_sensor.is_on: esphome_${switch_name}
            then:
              - switch.turn_on: plg_1
            else:
              - switch.turn_off: plg_1