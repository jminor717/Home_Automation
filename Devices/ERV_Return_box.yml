substitutions:
  device_name: return-air-box

external_components:
  - source:
      type: local
      path: ..\my_components # path relative to Devices folder

esphome:
  name: $device_name
  platformio_options:
    board_build.2flash_mode: dio

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 8MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_8MB: y

preferences:
  # the default of 1min is far too short--flash chip is rated for approx 100k writes.
  flash_write_interval: "48h"

api:
  # password: ""
ota:
  platform: esphome
  password: ""

logger:
  level: info

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "$device_name AP"
    password: "BiSG9yrKP394"
captive_portal:

time:
  - platform: homeassistant

button:
  - platform: restart
    name: "$device_name Restart"

text_sensor:
  - platform: version
    name: "$device_name Version"

i2c:
  - id: bus_a
    sda: GPIO20
    scl: GPIO21
    scan: true

sensor:
  - { platform: uptime, id: uptime_seconds, update_interval: 1min }
  - { platform: template, id: uptime_days, name: "$device_name uptime", update_interval: 1min, 
      device_class: duration, entity_category: "diagnostic", unit_of_measurement: "d", accuracy_decimals: 2,
      lambda: !lambda "return id(uptime_seconds).state / 86'400;"}
  - { platform: adc, id: bathroom_servo_potentiometer, pin: GPIO4, update_interval: 250ms, attenuation: 12db }
  - { platform: adc, id: kitchen_servo_potentiometer, pin: GPIO5, update_interval: 250ms, attenuation: 12db }
  - { platform: adc, id: shop_servo_potentiometer, pin: GPIO6, update_interval: 250ms, attenuation: 12db }
  - platform: sht4x
    update_interval: 30s
    i2c_id: bus_a
    temperature:
      name: "Bathroom Temperature"
      id: bathroom_temp
      unit_of_measurement: "Â°C"
    humidity:
      name: "Bathroom Humidity"
      id: bathroom_humid
      on_value_range:
        - below: 55.0
          then:
            - output.turn_off: bathroom_vent_call
        - above: 65
          then:
            - output.turn_on: bathroom_vent_call

globals:
  - { id: open_vent_bits, type: int, initial_value: "0b0000'0000"}
  - { id: close_vent_bits, type: int, initial_value: "0b0000'0001"}


hard_stop_damper:
  - {id: bathroom_damper, servo_position_sensor: bathroom_servo_potentiometer, servo: bathroom_servo, 
    open_at_center: true, switch_open_and_close: false, open_offset: -0.075 }
  - {id: kitchen_damper, servo_position_sensor: kitchen_servo_potentiometer, servo: kitchen_servo, 
    open_at_center: true, switch_open_and_close: false, open_offset: 0 }
  - {id: shop_damper, servo_position_sensor: shop_servo_potentiometer, servo: shop_servo, 
    open_at_center: true, switch_open_and_close: false, open_offset: 0 }


cover:
  - platform: template
    device_class: damper
    id: bathroom_vent
    name: bathroom vent
    restore_mode: NO_RESTORE
    open_action: { servo.write: { id: bathroom_servo, level: !lambda "return id(bathroom_damper).open_position;" } }
    close_action: { servo.write: { id: bathroom_servo, level: !lambda "return  id(bathroom_damper).close_position;" }}
    tilt_action: { servo.write: { id: bathroom_servo, level: !lambda "return id(bathroom_damper).tilt_to_servo_position(tilt);" }}
    tilt_lambda: !lambda "return id(bathroom_damper).get_tilt();"
    lambda: "return id(bathroom_damper).get_cover_state();"
  - platform: template
    device_class: damper
    id: kitchen_vent
    name: kitchen vent
    restore_mode: NO_RESTORE
    open_action: { servo.write: { id: bathroom_servo, level: !lambda "return id(kitchen_damper).open_position;" } }
    close_action: { servo.write: { id: bathroom_servo, level: !lambda "return  id(kitchen_damper).close_position;" }}
    tilt_action: { servo.write: { id: bathroom_servo, level: !lambda "return id(kitchen_damper).tilt_to_servo_position(tilt);" }}
    tilt_lambda: !lambda "return id(kitchen_damper).get_tilt();"
    lambda: "return id(kitchen_damper).get_cover_state();"
  - platform: template
    device_class: damper
    id: shop_vent
    name: shop vent
    restore_mode: NO_RESTORE
    open_action: { servo.write: { id: bathroom_servo, level: !lambda "return id(shop_damper).open_position;" } }
    close_action: { servo.write: { id: bathroom_servo, level: !lambda "return  id(shop_damper).close_position;" }}
    tilt_action: { servo.write: { id: bathroom_servo, level: !lambda "return id(shop_damper).tilt_to_servo_position(tilt);" }}
    tilt_lambda: !lambda "return id(shop_damper).get_tilt();"
    lambda: "return id(shop_damper).get_cover_state();"



servo:
  - { id: bathroom_servo, output: bathroom_servo_output, transition_length: 5s, auto_detach_time: 1000ms, max_level: 60%, min_level: 5%}
  - { id: kitchen_servo, output: kitchen_servo_output, transition_length: 5s, auto_detach_time: 1000ms, max_level: 60%, min_level: 5%}
  - { id: shop_servo, output: shop_servo_output, transition_length: 5s, auto_detach_time: 1000ms, max_level: 60%, min_level: 5%}



output:
  - {platform: ledc, id: bathroom_servo_output, pin: GPIO14, frequency: 200 Hz}
  - {platform: ledc, id: kitchen_servo_output, pin: GPIO15, frequency: 200 Hz}
  - {platform: ledc, id: shop_servo_output, pin: GPIO16, frequency: 200 Hz}
  - platform: template
    id: bathroom_vent_call
    type: binary
    write_action:
      - if:
          condition:
            lambda: return state;
          # then: { canbus.send: { data: [0b1000_0001] } }
          then: 
            canbus.send: !lambda return {id(open_vent_bits), 0x20, 0x42}; 
          else: { canbus.send: { data: [0b0000_0001] } }
  - platform: template
    id: kitchen_vent_call
    type: binary
    write_action:
      - if:
          condition:
            lambda: return state;
          then: { canbus.send: { data: [0b1000_0010], can_id: 2 } }
          else: { canbus.send: { data: [0b0000_0010], can_id: 2 } }
  - platform: template
    id: shop_vent_call
    type: binary
    write_action:
      - if:
          condition:
            lambda: return state;
          then: { canbus.send: { data: [0b1000_0100], can_id: 2 } }
          else: { canbus.send: { data: [0b0000_0100], can_id: 2 } }

binary_sensor:
  - platform: gpio
    pin: GPIO19
    name: "bathroom vent switch"
    id: bathroom_vent_switch
    device_class: moisture
    filters:
      - delayed_on_off: 250ms
    on_press:
      then:
        - output.turn_on: bathroom_vent_call
    on_release:
      then:
        - output.turn_off: bathroom_vent_call

canbus:
  - platform: esp32_can
    tx_pin: GPIO17
    rx_pin: GPIO18
    can_id: 2
    bit_rate: 125KBPS

# switch:
  # - platform: template
  #   name: "Bathroom Vent Call"
  #   id: bathroom_vent_call
  #   turn_on_action:
  #     - canbus.send:
  #         data: [ 0x01 ]
  #         can_id: 2
  #   turn_off_action:
  #     - canbus.send:
  #         data: [ 0x03 ]
  #         can_id: 2
