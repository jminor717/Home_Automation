substitutions:
  device_name: erv-ctrl
  eth_cs: GPIO9
  eth_clk: GPIO10
  eth_miso: GPIO11
  eth_mosi: GPIO12
  eth_int: GPIO13
  eth_rst: GPIO14

  scl_pin: GPIO20
  sda_pin: GPIO19

  erv_in_l_pin: GPIO21
  erv_out_l_pin: GPIO38


external_components:
  - source:
      type: local
      path: ..\..\my_components # path relative to Devices folder

esphome:
  name: $device_name
  platformio_options:
    board_build.flash_mode: dio
  includes:
    - src\erv_ctrl\pressurePeakFilter.h
    - src\erv_ctrl\PID.h
    - src\erv_ctrl\PressurePID.h
  on_boot:
    - priority: 600
      then:
        - lambda: |-
            init_pressure_pid_();




esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 8MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_8MB: y

preferences:
  # the default of 1min is far too short--flash chip is rated
  # for approx 100k writes.
  flash_write_interval: "48h"

api:
  # password: ""
ota:
  platform: esphome
  password: ""

logger:
  level: INFO

ethernet:
  type: W5500
  clk_pin: $eth_clk
  mosi_pin: $eth_mosi
  miso_pin: $eth_miso
  cs_pin: $eth_cs
  interrupt_pin: $eth_int
  reset_pin: $eth_rst

time:
  - platform: homeassistant

button:
  - platform: restart
    name: "$device_name Restart"

text_sensor:
  - platform: version
    name: "$device_name Version"


i2c:
  - id: bus_a
    sda: $sda_pin
    scl: $scl_pin
    scan: true


# 0.005715
sensor:
  - { platform: uptime, id: uptime_seconds, update_interval: 1min }
  - { platform: template, id: uptime_days, name: "$device_name uptime", update_interval: 1min, 
      device_class: duration, entity_category: "diagnostic", unit_of_measurement: "d", accuracy_decimals: 2,
      lambda: !lambda "return id(uptime_seconds).state / 86'400;"}
  - platform: sdp3x
    update_interval: 10ms
    name: "Pressure Delta"
    id: pressure_dif
    i2c_id: bus_a
    address: 0x25
    # unit_of_measurement: "Pa"
    filters:
      - sliding_window_moving_average:
          window_size: 48
          send_every: 12
      - lambda: |-
          id(pressure_dif_avg).publish_state(x);
          return x;
      # send to lambda filter 4 times per second lambda sends once every 30 seconds
      # lambda will average over the last 30 seconds
      # if the value is an outlier to the running average, it will send the next 20 values in order to capture transient events
      - lambda: |-
            return peakFilter.apply_filter(x);
      - delta: 0.0005
  - platform: template
    # name: "Pressure Delta Average"
    internal: true
    id: pressure_dif_avg
    unit_of_measurement: "hPa"
    device_class: "pressure"
    state_class: "measurement"
    accuracy_decimals: 3
    filters:
      - sliding_window_moving_average:
          window_size: 480
          send_every: 83
      # - delta: 0.0005
    on_value:
      then: 
        - delay: 100ms
        - script.execute: eval_erv_state

# globals:
#   - { id: erv_pid, type: "struct tm" }
#   - id: my_global_struct_instance
#     type: MyCustomStruct
#     restore_value: no # or yes, depending on your needs
#     initial_value: '{.value1 = 10, .value2 = 3.14, .name = "My Initial Name"}' # Initialize members
# , initial_value: ""

script:
  - id: eval_erv_state
    mode: single
    then:
      - lambda: |-
          // id(erv_pid).tm_sec = 0;
          float current_pressure = id(pressure_dif_avg).state * 100.0; // convert hPa to Pa
          float Fan_l = update_pressure_pid_(current_pressure);

          if(Fan_l != NAN) {
            auto call = id(erv_in).turn_on();
            call.set_speed(Fan_l);
            call.perform();
            ESP_LOGI("erv_eval", "SP:  %.6f  pressure: %.6f   %.2f  %.2f  %.2f  %.2f", Fan_l, current_pressure, id(pressure_target).state, id(max_vent_speed).state, id(min_vent_speed).state, id(vent_speed_sp).state);
          }

          auto outputSpeed = id(vent_speed_sp).state;
          auto call = id(erv_out).turn_on();
          call.set_speed(outputSpeed);
          call.perform();


  - id: erv_pid_change
    mode: queued
    then:
      - lambda: |-
          pid_limits(pressure_pid, id(min_vent_speed).state, id(max_vent_speed).state);
          pressure_setpoint = id(pressure_target).state;





fan:
  - platform: speed
    output: erv_in_l
    name: "ERV input"
    id: erv_in
  - platform: speed
    output: erv_out_l
    name: "ERV output"
    id: erv_out

output:
  - platform: ledc
    pin: $erv_in_l_pin
    id: erv_in_l
    frequency: 19531Hz
  - platform: ledc
    pin: $erv_out_l_pin
    id: erv_out_l
    frequency: 19531Hz


number:
  - { platform: homeassistant, id: pressure_target, name: "Pressure Target", entity_id: input_number.home_pressure_target,
      on_value: { then: [ delay: 100ms, script.execute: erv_pid_change]} }
  - { platform: homeassistant, id: max_vent_speed, name: "Max Vent Speed", entity_id: input_number.max_vent_speed,
      on_value: { then: [ delay: 100ms, script.execute: erv_pid_change]} }
  - { platform: homeassistant, id: min_vent_speed, name: "Min Vent Speed", entity_id: input_number.min_vent_speed,
      on_value: { then: [ delay: 100ms, script.execute: erv_pid_change]} }
  - { platform: homeassistant, id: vent_speed_sp, name: "Vent Speed Target", entity_id: input_number.vent_speed_target,
      on_value: { then: [ delay: 100ms, script.execute: erv_pid_change]}  }
  # - platform: template
  #   id: max_vent_speed
  #   name: "Max Vent Speed"
  #   optimistic: true
  #   min_value: 10
  #   max_value: 100
  #   step: 1
  # - platform: template
  #   id: min_vent_speed
  #   name: "Min Vent Speed"
  #   optimistic: true
  #   min_value: 10
  #   max_value: 100
  #   step: 1

