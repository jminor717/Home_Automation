esphome:
  name: emporiavue3

substitutions:
  display_name: EmpVu3

external_components:
#  - source: github://emporia-vue-local/esphome@dev
  - source: github://digiblur/esphome-vue3@dev
    components:
      - emporia_vue
      
esp32:
  board: esp32dev
  framework:
    type: esp-idf
    version: recommended

preferences:
  # the default of 1min is far too short--flash chip is rated for approx 100k writes.
  flash_write_interval: "96h"

api:
ota:
  platform: esphome
  password: ""

logger:
  level: INFO
  # logs:
  #   wifi: INFO
  #   captive_portal: INFO
  #   button: INFO
  #   time: INFO

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap: 

captive_portal:

# ethernet:
#   type: RTL8201
#   mdc_pin: GPIO32
#   mdio_pin: GPIO33
#   clk_mode: GPIO0_IN

light:
  - platform: status_led
    id: wifi_led
    pin:
      number: 2
      ignore_strapping_warning: true
    restore_mode: RESTORE_DEFAULT_ON

i2c:
  sda: 5
  scl: 18
  scan: false
  frequency: 400kHz  # IMPORTANT: Handle Failed to read from sensor due to I2C error 3
  timeout: 2ms # IMPORTANT: Handle Failed to read from sensor due to I2C error 3
  id: i2c_a

button:
  - platform: restart
    name: Restart  

text_sensor:
  - platform: version
    name: "$display_name Version"

time:
  - platform: homeassistant

# these are called references in YAML. They allow you to reuse
# this configuration in each sensor, while only defining it once
.defaultfilters:
  - &throttle_avg
    # average all raw readings together over a 5 second span before publishing
    throttle_average: 5s
  - &throttle_time
    # only send the most recent measurement every 60 seconds
    throttle: 60s
  - &moving_avg
    # we capture a new sample every 0.24 seconds, so the time can
    # be calculated from the number of samples as n * 0.24.
    sliding_window_moving_average:
      # we average over the past 2.88 seconds
      window_size: 24
      # we push a new value every 1.44 seconds
      send_every: 12
  - &invert
    # invert and filter out any values below 0.
    lambda: 'return max(-x, 0.0f);'
  - &pos
    # filter out any values below 0.
    lambda: 'return max(x, 0.0f);'
  - &abs
    # take the absolute value of the value
    lambda: 'return abs(x);'

sensor:
  - { platform: uptime, id: uptime_seconds, update_interval: 1min }
  - { platform: template, id: uptime_days, name: "$display_name uptime", update_interval: 1min, 
      device_class: duration, entity_category: "diagnostic", unit_of_measurement: "d", accuracy_decimals: 2,
      lambda: !lambda "return id(uptime_seconds).state / 86'400;"}
  - platform: emporia_vue
    i2c_id: i2c_a
    phases:
      - id: phase_a  # Verify that this specific phase/leg is connected to correct input wire color on device listed below
        input: BLACK  # Vue device wire color
        calibration: 0.01914  # 0.022 is used as the default as starting point but may need adjusted to ensure accuracy
        # To calculate new calibration value use the formula <in-use calibration value> * <accurate voltage> / <reporting voltage>
        voltage:
          name: "Phase A Voltage"
          filters: [*moving_avg, *pos]
        frequency:
          name: "Phase A Frequency"
          filters: [*moving_avg, *pos]
      - id: phase_b  # Verify that this specific phase/leg is connected to correct input wire color on device listed below
        input: RED  # Vue device wire color
        calibration: 0.01914  # 0.022 is used as the default as starting point but may need adjusted to ensure accuracy
        # To calculate new calibration value use the formula <in-use calibration value> * <accurate voltage> / <reporting voltage>
        voltage:
          name: "Phase B Voltage"
          filters: [*moving_avg, *pos]
        phase_angle:
          name: "Phase B Phase Angle"
          filters: [*moving_avg, *pos]
    ct_clamps:
      - { phase_id: phase_a, input:  "A", power: { name: "Phase A Power",               id:  phase_a_power, device_class: power, filters: [ *moving_avg ] } }
      - { phase_id: phase_b, input:  "B", power: { name: "Phase B Power",               id:  phase_b_power, device_class: power, filters: [ *moving_avg ] } }
      # Pay close attention to set the phase_id for each breaker by matching it to the phase/leg it connects to in the panel
      - { phase_id: phase_b, input:  "1", power: { name: "Washer_Hood Power",           id:  cir1, filters: [ *moving_avg,              *invert ] } }
      - { phase_id: phase_b, input:  "2", power: { name: "Well Pump Power",             id:  cir2, filters: [ *moving_avg, multiply: 2, *invert ] } }
      - { phase_id: phase_a, input:  "3", power: { name: "Fridge Power",                id:  cir3, filters: [ *moving_avg,              *invert ] } }
      - { phase_id: phase_b, input:  "4", power: { name: "Water Heater Power",          id:  cir4, filters: [ *moving_avg, multiply: 2, *invert ] } }
      - { phase_id: phase_b, input:  "5", power: { name: "AC compressor Power",         id:  cir5, filters: [ *moving_avg, multiply: 2, *invert ] } }
      - { phase_id: phase_b, input:  "6", power: { name: "Dryer Power",                 id:  cir6, filters: [ *moving_avg, multiply: 2, *invert ] } }
      - { phase_id: phase_b, input:  "7", power: { name: "Septic Power",                id:  cir7, filters: [ *moving_avg, multiply: 2, *invert ] } }
      - { phase_id: phase_b, input:  "8", power: { name: "Cook Top Power",              id:  cir8, filters: [ *moving_avg, multiply: 2, *invert ] } }
      - { phase_id: phase_b, input:  "9", power: { name: "Oven Power",                  id:  cir9, filters: [ *moving_avg, multiply: 2, *invert ] } }
      - { phase_id: phase_b, input: "10", power: { name: "Network Power",               id: cir10, filters: [ *moving_avg,              *invert ] } }
#      - { phase_id: phase_b, input: "11", power: { name: "Circuit 11 Power",           id: cir11, filters: [ *moving_avg ] } }
      - { phase_id: phase_b, input: "12", power: { name: "Dishwasher_Microwave Power",  id: cir12, filters: [ *moving_avg,              *invert ] } }
      - { phase_id: phase_a, input: "13", power: { name: "Living Recps Power",          id: cir13, filters: [ *moving_avg ] } } # , *invert
      - { phase_id: phase_b, input: "14", power: { name: "Air Handler Power",           id: cir14, filters: [ *moving_avg, multiply: 2, *invert ] } }
      - { phase_id: phase_b, input: "15", power: { name: "Lights_Storage Power",        id: cir15, filters: [ *moving_avg,              *invert ] } }
      - { phase_id: phase_a, input: "16", power: { name: "Bedroom_Garage Power",        id: cir16, filters: [ *moving_avg,              *invert ] } }
      # CURRENT
      - { phase_id: phase_a, input:  "A", current: { name:  "Phase A Current",              id:  current_a, device_class: current, filters: [ *moving_avg ] } }
      - { phase_id: phase_b, input:  "B", current: { name:  "Phase B Current",              id:  current_b, device_class: current, filters: [ *moving_avg ] } }
      - { phase_id: phase_b, input:  "1", current: { name:  "Washer_Hood Current",          id:  cur1, filters: [ *moving_avg ] } }
      - { phase_id: phase_b, input:  "2", current: { name:  "Well Pump Current",            id:  cur2, filters: [ *moving_avg, multiply: 2 ] } }
      - { phase_id: phase_a, input:  "3", current: { name:  "Fridge Current",               id:  cur3, filters: [ *moving_avg ] } }
      - { phase_id: phase_b, input:  "4", current: { name:  "Water Heater Current",         id:  cur4, filters: [ *moving_avg, multiply: 2 ] } }
      - { phase_id: phase_b, input:  "5", current: { name:  "AC compressor Current",        id:  cur5, filters: [ *moving_avg, multiply: 2 ] } }
      - { phase_id: phase_b, input:  "6", current: { name:  "Dryer Current",                id:  cur6, filters: [ *moving_avg, multiply: 2 ] } }
      - { phase_id: phase_b, input:  "7", current: { name:  "Septic Current",               id:  cur7, filters: [ *moving_avg, multiply: 2 ] } }
      - { phase_id: phase_b, input:  "8", current: { name:  "Cook Top Current",             id:  cur8, filters: [ *moving_avg, multiply: 2 ] } }
      - { phase_id: phase_b, input:  "9", current: { name:  "Oven Current",                 id:  cur9, filters: [ *moving_avg, multiply: 2 ] } }
      - { phase_id: phase_b, input: "10", current: { name: "Network Current",               id: cur10, filters: [ *moving_avg ] } }
#      - { phase_id: phase_b, input: "11", current: { name: "Circuit 11 Current", id: cur11, filters: [ *moving_avg ] } }
      - { phase_id: phase_b, input: "12", current: { name: "Dishwasher_Microwave Current",  id: cur12, filters: [ *moving_avg ] } }
      - { phase_id: phase_a, input: "13", current: { name: "Living Recps Current",          id: cur13, filters: [ *moving_avg ] } }
      - { phase_id: phase_b, input: "14", current: { name: "Air Handler Current",           id: cur14, filters: [ *moving_avg, multiply: 2 ] } }
      - { phase_id: phase_b, input: "15", current: { name: "Lights_Storage Current",        id: cur15, filters: [ *moving_avg ] } }
      - { phase_id: phase_a, input: "16", current: { name: "Bedroom_Garage Current",        id: cur16, filters: [ *moving_avg ] } }
  - platform: template
    name: "Total Power"
    lambda: return id(phase_a_power).state + id(phase_b_power).state;
    update_interval: 2s
    id: total_power
    unit_of_measurement: "W"
  - platform: template
    name: "HV-AC Power"
    lambda: return id(cir14).state + id(cir5).state;
    update_interval: 2s
    id: ac_power
    unit_of_measurement: "W"
  - platform: template
    name: "UnTracked Power"
    lambda: |-
      float totalPower = id(phase_a_power).state + id(phase_b_power).state;
      float circuitPower = 
        id(cir1).state + 
        id(cir2).state + 
        id(cir3).state + 
        id(cir4).state + 
        id(cir5).state + 
        id(cir6).state + 
        id(cir7).state + 
        id(cir8).state + 
        id(cir9).state + 
        id(cir10).state + 
        id(cir12).state + 
        id(cir13).state + 
        id(cir14).state + 
        id(cir15).state + 
        id(cir16).state;
        return totalPower - circuitPower;
    update_interval: 2s
    id: untracked_power
    unit_of_measurement: "W"
  - platform: total_daily_energy
    name: "Total Daily Energy"
    power_id: total_power
    restore: false
    accuracy_decimals: 0
  - { power_id:  cir1, platform: total_daily_energy, restore: false, accuracy_decimals: 0, name:  "Washer_Hood Energy" }
  - { power_id:  cir2, platform: total_daily_energy, restore: false, accuracy_decimals: 0, name:  "Well Pump Energy" }
  - { power_id:  cir3, platform: total_daily_energy, restore: false, accuracy_decimals: 0, name:  "Fridge Energy" }
  - { power_id:  cir4, platform: total_daily_energy, restore: false, accuracy_decimals: 0, name:  "Water Heater Energy" }
  # - { power_id:  cir5, platform: total_daily_energy, restore: false, accuracy_decimals: 0, name:  "AC compressor Energy" }
  - { power_id:  cir6, platform: total_daily_energy, restore: false, accuracy_decimals: 0, name:  "Dryer Energy" }
  - { power_id:  cir7, platform: total_daily_energy, restore: false, accuracy_decimals: 0, name:  "Septic Energy" }
  # - { power_id:  cir8, platform: total_daily_energy, restore: false, accuracy_decimals: 0, name:  "Air Handler Energy" }
  - { power_id:  cir9, platform: total_daily_energy, restore: false, accuracy_decimals: 0, name:  "Cook Top Energy" }
  - { power_id: cir10, platform: total_daily_energy, restore: false, accuracy_decimals: 0, name: "Network Energy" }
#  - { power_id: cir11, platform: total_daily_energy, accuracy_decimals: 0, name: "Circuit 11 Daily Energy" }
  - { power_id: cir12, platform: total_daily_energy, restore: false, accuracy_decimals: 0, name: "Dishwasher_Microwave Energy" }
  - { power_id: cir13, platform: total_daily_energy, restore: false, accuracy_decimals: 0, name: "Living Recps Energy" }
  - { power_id: cir14, platform: total_daily_energy, restore: false, accuracy_decimals: 0, name: "Oven Energy" }
  - { power_id: cir15, platform: total_daily_energy, restore: false, accuracy_decimals: 0, name: "Lights_Storage Energy" }
  - { power_id: cir16, platform: total_daily_energy, restore: false, accuracy_decimals: 0, name: "Bedroom_Garage Energy" }
  - { power_id: ac_power, platform: total_daily_energy, restore: false, accuracy_decimals: 0, name: "AC Energy" }
  - { power_id: untracked_power, platform: total_daily_energy, restore: false, accuracy_decimals: 0, name: "Untracked Energy" }


# light:
#   - platform: status_led
#     #name: "D3_LED"
#     id: wifi_led
#     #pin: 2
#     pin:
#       number: 2
#       ignore_strapping_warning: true
#     #restore_mode: ALWAYS_ON
#     restore_mode: RESTORE_DEFAULT_ON
#     #entity_category: config
#   - platform: status_led
#     #name: "D31_LED"
#     id: ethernet_led
#     pin: 4
#     #restore_mode: ALWAYS_ON
#     restore_mode: RESTORE_DEFAULT_ON
#     #entity_category: config