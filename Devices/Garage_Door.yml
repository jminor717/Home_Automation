substitutions:
  device_name: garage-door
  eth_cs: GPIO9
  eth_clk: GPIO10
  eth_miso: GPIO11
  eth_mosi: GPIO12
  eth_int: GPIO13
  eth_rst: GPIO14

  motor_speed_pin: GPIO6
  motor_dir_A: GPIO7
  motor_dir_B: GPIO15

  lock_r_lock: GPIO16
  lock_r_unlock: GPIO17

external_components:
  - source:
      type: local
      path: ..\my_components # path relative to Devices folder

esphome:
  name: $device_name
  platformio_options:
    board_build.flash_mode: dio

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 8MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_8MB: y
      # CONFIG_ESP_TIMER_SUPPORTS_ISR_DISPATCH_METHOD: y

preferences:
  # the default of 1min is far too short--flash chip is rated for approx 100k writes.
  flash_write_interval: "48h"

api:
  # password: ""
ota:
  platform: esphome
  password: ""

logger:
  level: debug
  logs:
    wifi: INFO
    sensor: INFO
    binary_sensor: INFO

ethernet:
  type: W5500
  clk_pin: $eth_clk
  mosi_pin: $eth_mosi
  miso_pin: $eth_miso
  cs_pin: $eth_cs
  interrupt_pin: $eth_int
  reset_pin: $eth_rst

time:
  - platform: homeassistant

button:
  - platform: restart
    name: "$device_name Restart"

text_sensor:
  - platform: version
    name: "$device_name Version"

sensor:
  - { platform: uptime, id: uptime_seconds, update_interval: 1min }
  - { platform: template, id: uptime_days, name: "$device_name uptime", update_interval: 1min, device_class: duration, entity_category: "diagnostic", unit_of_measurement: "d",
      accuracy_decimals: 2, lambda: !lambda "return id(uptime_seconds).state / 86'400;", }

output:
  - platform: ledc
    pin: $motor_speed_pin
    id: motor_speed
    frequency: 19531Hz
    # 39063Hz
  - platform: gpio
    pin: $motor_dir_A
    id: motor_dir_1
  - platform: gpio
    pin: $motor_dir_B
    id: motor_dir_2

globals:
  - { id: lock_r_moving, type: bool, initial_value: "false" }

script:
  - id: check_lock_jammed
    mode: restart
    then:
      - delay: 5s
      - if:
          condition:
            and:
              - binary_sensor.is_off: r_lock_sensor
              - binary_sensor.is_off: r_unlock_sensor
          then:
            - lock.template.publish: { id: door_r_lock, state: JAMMED }
            - output.turn_off: motor_speed
            - globals.set: { id: lock_r_moving, value: "false"}

lock:
  - platform: template
    id: door_r_lock
    name: "Right Garage Door Lock"
    lock_action:
      - globals.set: { id: lock_r_moving, value: "true"}
      - output.turn_off: motor_dir_1
      - output.turn_on: motor_dir_2
      - output.set_level: { id: motor_speed, level: 80% }
      - script.execute: check_lock_jammed
    unlock_action:
      - globals.set: { id: lock_r_moving, value: "true"}
      - output.turn_on: motor_dir_1
      - output.turn_off: motor_dir_2
      - output.set_level: { id: motor_speed, level: 80% }
      - script.execute: check_lock_jammed
    open_action:
      - globals.set: { id: lock_r_moving, value: "true"}
      - output.turn_on: motor_dir_1
      - output.turn_off: motor_dir_2
      - output.set_level: { id: motor_speed, level: 80% }
      - script.execute: check_lock_jammed
      # - lock.template.publish: { id: door_r_lock, state: UNLOCKING }

#   valid options are 'LOCKED', 'UNLOCKED', 'JAMMED', 'LOCKING', 'UNLOCKING'

binary_sensor:
  - platform: status
    id: connection_status
    on_state:
      then:
        - delay: 3s
        - if:
            condition: { binary_sensor.is_on: r_lock_sensor }
            then:
              - lock.template.publish: { id: door_r_lock, state: LOCKED }
              - globals.set: { id: lock_r_moving, value: "false"}
            else:
              - if:
                  condition: { binary_sensor.is_on: r_unlock_sensor }
                  then:
                    - lock.template.publish: { id: door_r_lock, state: UNLOCKED }
                    - globals.set: { id: lock_r_moving, value: "false"}
                  else: { lock.lock: door_r_lock }
  - platform: gpio
    id: r_lock_sensor
    pin: { number: $lock_r_lock, mode: { input: true, pulldown : true } }
    filters: [ delayed_on_off: 100ms]
    on_press: 
      then:
        - lock.template.publish: { id: door_r_lock, state: LOCKED }
        - output.turn_off: motor_speed
        - globals.set: { id: lock_r_moving, value: "false"}
    on_release:
      if:
        condition:
          lambda: 'return id(lock_r_moving);'
        then: { lock.template.publish: { id: door_r_lock, state: UNLOCKING } }
        else: { lock.template.publish: { id: door_r_lock, state: JAMMED } }
  - platform: gpio
    id: r_unlock_sensor
    pin: { number: $lock_r_unlock, mode: { input: true, pulldown : true } }
    filters: [ delayed_on_off: 100ms]
    on_press: 
      then:
        - lock.template.publish: { id: door_r_lock, state: UNLOCKED }
        - output.turn_off: motor_speed
        - globals.set: { id: lock_r_moving, value: "false"}
    on_release:
      if:
        condition:
          lambda: 'return id(lock_r_moving);'
        then: { lock.template.publish: { id: door_r_lock, state: LOCKING } }
        else: { lock.template.publish: { id: door_r_lock, state: JAMMED } }

