substitutions:
  device_name: erv-board
  switch_name: test_restore

external_components:
  - source:
      type: local
      path: ..\my_components # path relative to Devices folder

globals:
  - { id: erv_hs, type: bool, initial_value: "false" }
  - { id: erv_hs_since, type: uint32_t, initial_value: "0" }
  - { id: erv_hs_speed, type: int, initial_value: "80" }
  - { id: erv_ls_speed, type: int, initial_value: "30" }


esphome:
  name: $device_name
  platformio_options:
    board_build.flash_mode: dio

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 8MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_8MB: y
      # CONFIG_ESP_TIMER_SUPPORTS_ISR_DISPATCH_METHOD: y

preferences:
  # the default of 1min is far too short--flash chip is rated
  # for approx 100k writes.
  flash_write_interval: "48h"

api:
  # password: ""
ota:
  platform: esphome
  password: ""

logger:
  level: debug
  logs:
    wifi: INFO
    captive_portal: INFO
    canbus: INFO
    sensor: INFO
    binary_sensor: INFO

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "$device_name AP"
    password: "BiSG9yrKP394"
captive_portal:

time:
  - platform: homeassistant

button:
  - platform: restart
    name: "$device_name Restart"
  - platform: template
    id: run_call
    name: "home vent servo"
    on_press:
      then:
        lambda: !lambda |-
          id(attic_return_damper)->setup();

text_sensor:
  - platform: version
    name: "$device_name Version"
  # - platform: template
  #   name: "$device_name Uptime"
  #   update_interval: 5min
  #   icon: mdi:clock-start
  #   entity_category: "diagnostic"
  #   lambda: |-
  #     int seconds = (id(uptime_seconds).state);
  #     int days = seconds / (24 * 3600);
  #     seconds = seconds % (24 * 3600);
  #     int hours = seconds / 3600;
  #     seconds = seconds % 3600;
  #     int minutes = seconds /  60;
  #     return  std::to_string(days) +"d " + std::to_string(hours) +"h " + std::to_string(minutes) +"m";

hard_stop_damper:
  - id: attic_return_damper
    servo_position_sensor: attic_return_servo_potentiometer
    servo: attic_return_servo
    open_at_center: true
    switch_open_and_close: false
    open_offset: -0.075
  - id: attic_supply_damper
    servo_position_sensor: attic_supply_servo_potentiometer
    servo: attic_supply_servo
    open_at_center: true
    switch_open_and_close: false
    # open_offset: -0.1

cover:
  - platform: template
    device_class: damper
    id: attic_return_vent
    name: attic return vent
    restore_mode: NO_RESTORE
    open_action: { servo.write: { id: attic_return_servo, level: !lambda "return id(attic_return_damper).open_position;" } }
    close_action: { servo.write: { id: attic_return_servo, level: !lambda "return  id(attic_return_damper).close_position;" }}
    tilt_action: { servo.write: { id: attic_return_servo, level: !lambda "return id(attic_return_damper).tilt_to_servo_position(tilt);" }}
    tilt_lambda: !lambda "return id(attic_return_damper).get_tilt();"
    lambda: "return id(attic_return_damper).get_cover_state();"
  - platform: template
    device_class: damper
    id: attic_supply_vent
    name: attic supply vent
    restore_mode: NO_RESTORE
    open_action: { servo.write: { id: attic_return_servo, level: !lambda "return id(attic_supply_damper).open_position;" } }
    close_action: { servo.write: { id: attic_return_servo, level: !lambda "return  id(attic_supply_damper).close_position;" }}
    tilt_action: { servo.write: { id: attic_return_servo, level: !lambda "return id(attic_supply_damper).tilt_to_servo_position(tilt);" }}
    tilt_lambda: !lambda "return id(attic_supply_damper).get_tilt();"
    lambda: "return id(attic_supply_damper).get_cover_state();"

fan:
  - platform: speed
    output: erv_in_l
    id: erv_fan_in
    restore_mode: ALWAYS_ON 
  - platform: speed
    output: erv_out_l
    id: erv_fan_out
    restore_mode: ALWAYS_ON 

sensor:
  - { platform: uptime, id: uptime_seconds, update_interval: 1min }
  - { platform: template, id: uptime_days, name: "$device_name uptime", update_interval: 1min, 
      device_class: duration, entity_category: "diagnostic", unit_of_measurement: "d", accuracy_decimals: 2,
      lambda: !lambda "return id(uptime_seconds).state / 86'400;"}
  - { platform: adc, id: attic_return_servo_potentiometer, pin: GPIO4, update_interval: 100ms, attenuation: 12db, filters: { delta: 0.05 } }
  - { platform: adc, id: attic_supply_servo_potentiometer, pin: GPIO5, update_interval: 100ms, attenuation: 12db, filters: { delta: 0.05 } }
  - platform: template
    name: "Vent Speed Sensor"
    lambda: !lambda "return id(erv_fan_in).speed;"
    update_interval: 60s


servo:
  - { id: attic_return_servo, output: attic_return_servo_output, transition_length: 5s, auto_detach_time: 1000ms, max_level: 60%, min_level: 5%}
  - { id: attic_supply_servo, output: attic_supply_servo_output, transition_length: 5s, auto_detach_time: 1000ms, max_level: 60%, min_level: 5%}

output:
  - {platform: ledc, id: attic_return_servo_output, pin: GPIO14, frequency: 200Hz}
  - {platform: ledc, id: attic_supply_servo_output, pin: GPIO13, frequency: 200Hz}
  - {platform: ledc, id: erv_in_l, pin: GPIO12, frequency: 19531Hz}
  - {platform: ledc, id: erv_out_l, pin: GPIO11, frequency: 19531Hz}

# status_led:
#   pin: $led

light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO48
    num_leds: 1
    rmt_channel: 0
    chipset: ws2812
    name: "$device_name Light"


script:
  - id: eval_erv_state
    mode: single 
    then:
      - delay: 100ms
      - lambda: |-
          if((id(bathroom_vent_call).state || id(kitchen_vent_call).state || id(shop_vent_call).state || id(attic_vent_call).state)){
            // one of the vents is calling for increased ventilation
            if(!id(erv_hs)){
              id(erv_hs) = true;
              id(erv_hs_since) = millis();
              id(erv_fan_in).turn_on().set_speed(id(erv_hs_speed)).perform();
            }
            ESP_LOGI("erv_eval", "attic: %d, bathroom: %d, kitchen: %d, shop: %d, all: %d", id(attic_vent_call).state, id(bathroom_vent_call).state, id(kitchen_vent_call).state, id(shop_vent_call).state, id(bathroom_vent_call).state || id(kitchen_vent_call).state || id(shop_vent_call).state || id(attic_vent_call).state);
            if(id(attic_vent_call).state){ id(attic_return_vent).make_call().set_tilt(1).perform(); }
            else {                         id(attic_return_vent).make_call().set_tilt(0.3).perform(); }
          }else{
            // no vents calling for increased ventilation all should be even
            ESP_LOGI("erv_eval", "else| attic: %d, bathroom: %d, kitchen: %d, shop: %d, all: %d", id(attic_vent_call).state, id(bathroom_vent_call).state, id(kitchen_vent_call).state, id(shop_vent_call).state, id(bathroom_vent_call).state || id(kitchen_vent_call).state || id(shop_vent_call).state || id(attic_vent_call).state);
            id(erv_hs) = false;
            id(erv_fan_in).turn_on().set_speed(id(erv_ls_speed)).perform();
            id(attic_return_vent).make_call().set_tilt(1).perform();
          }
          if(id(erv_hs)){
            auto now = millis();
            if(now > id(erv_hs_since) + 14'400'000){ // 4 hours
              id(erv_fan_in).turn_on().set_speed(id(erv_ls_speed)).perform();
            }
          }

switch:
  - { platform: template, name: bathroom vent call remote, id: bathroom_vent_call, optimistic: true, on_turn_off: { script.execute: eval_erv_state }, turn_on_action: { script.execute: eval_erv_state } }
  - { platform: template, name: kitchen vent call remote, id: kitchen_vent_call, optimistic: true, on_turn_off: { script.execute: eval_erv_state }, turn_on_action: { script.execute: eval_erv_state } }
  - { platform: template, name: shop vent call remote, id: shop_vent_call, optimistic: true, on_turn_off: { script.execute: eval_erv_state }, turn_on_action: { script.execute: eval_erv_state } }
  - { platform: template, name: attic vent call remote, id: attic_vent_call, optimistic: true, on_turn_off: { script.execute: eval_erv_state },  turn_on_action: { script.execute: eval_erv_state } }
    # lambda: return id(attic_vent_call).state;

binary_sensor:
  - platform: status
    id: connection_status
    on_state: 
      then: 
        - delay: 15s
        - script.execute: eval_erv_state
# binary_sensor:
#   - platform: template
#     name: kitchen vent call remote
#     id: kitchen_vent_call

canbus:
  - platform: esp32_can
    tx_pin: GPIO6
    rx_pin: GPIO7
    can_id: 1
    bit_rate: 125KBPS
    on_frame:
      - can_id: 2
        then:
          - lambda: |-
              if(x.size() > 0) {
                switch(x[0]) {
                  case 0b1000'0001:  // bathroom vent request start
                    id(bathroom_vent_call).turn_on(); break;
                  case 0b0000'0001:  // bathroom vent request end
                    id(bathroom_vent_call).turn_off(); break;

                  // case 0b1000'0010:  // kitchen vent request start
                  //   id(kitchen_vent_call).publish_state(true); break;
                  // case 0b0000'0010:  // kitchen vent request end
                  //   id(kitchen_vent_call).publish_state(false); break;

                  case 0b1000'0100:  // shop vent request start
                    id(shop_vent_call).turn_on(); break;
                  case 0b0000'0100:  // shop vent request end
                    id(shop_vent_call).turn_off(); break;
                }
              }
          - script.execute: eval_erv_state





