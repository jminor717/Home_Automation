substitutions:
  device_name: erv-board
  switch_name: test_restore

external_components:
  - source:
      type: local
      path: ..\my_components # path relative to Devices folder

globals:
  - { id: attic_return_upper, type: float, initial_value: "2.5"}
  - { id: attic_return_lower, type: float, initial_value: "0"}
  - { id: attic_return_opened, type: float, initial_value: "1"}
  - { id: attic_return_closed, type: float, initial_value: "0"}
  - { id: attic_supply_upper, type: float, initial_value: "2.5"}
  - { id: attic_supply_lower, type: float, initial_value: "0"}
  - { id: attic_supply_opened, type: float, initial_value: "1"}
  - { id: attic_supply_closed, type: float, initial_value: "0"}
  - { id: erv_hs, type: bool, initial_value: "false" }
  - { id: erv_hs_since, type: uint32_t, initial_value: "0" }
  - { id: erv_hs_speed, type: int, initial_value: "80" }
  - { id: erv_ls_speed, type: int, initial_value: "30" }


esphome:
  name: $device_name
  platformio_options:
    board_build.2flash_mode: dio

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 8MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_8MB: y

preferences:
  # the default of 1min is far too short--flash chip is rated
  # for approx 100k writes.
  flash_write_interval: "48h"

api:
  # password: ""
ota:
  platform: esphome
  password: ""

logger:
  level: info

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "$device_name AP"
    password: "BiSG9yrKP394"
captive_portal:

time:
  - platform: homeassistant

button:
  - platform: restart
    name: "$device_name Restart"
  - platform: template
    id: run_call
    name: "home vent servo"
    on_press:
      then:
        lambda: !lambda |-
          id(attic_return_damper)->setup();

text_sensor:
  - platform: version
    name: "$device_name Version"

web_server:
  version: 3
  sorting_groups:
    - id: sorting_group_time_settings
      name: "Time Settings"
      sorting_weight: 10
    - id: sorting_group_number_settings
      name: "Number settings"
      sorting_weight: 20

datetime:
  - platform: template
    id: my_datetime_time
    type: time
    name: "Pick a Time"
    optimistic: yes
    initial_value: "12:34:56"
    restore_value: false
    web_server:
      sorting_group_id: sorting_group_time_settings

number:
  - platform: template
    id: my_number
    name: "vent speed"
    optimistic: true
    min_value: 20
    max_value: 100
    step: 1
    web_server:
      sorting_group_id: sorting_group_number_settings

hard_stop_damper:
  - id: attic_return_damper
    upper_limit: attic_return_upper
    lower_limit: attic_return_lower
    open_position: attic_return_opened
    close_position: attic_return_closed
    servo_position_sensor: attic_return_servo_potentiometer
    servo: attic_return_servo
    open_at_center: true
    switch_open_and_close: false
    open_offset: -0.075
  - id: attic_supply_damper
    upper_limit: attic_supply_upper
    lower_limit: attic_supply_lower
    open_position: attic_supply_opened
    close_position: attic_supply_closed
    servo_position_sensor: attic_supply_servo_potentiometer
    servo: attic_supply_servo
    open_at_center: true
    switch_open_and_close: false
    # open_offset: -0.1

cover:
  - platform: template
    device_class: damper
    id: attic_return_vent
    name: attic return vent
    open_action: { servo.write: { id: attic_return_servo, level: !lambda "return id(attic_return_opened);" } }
    close_action: { servo.write: { id: attic_return_servo, level: !lambda "return  id(attic_return_closed);" } }
    tilt_action: { servo.write: { id: attic_return_servo, level: !lambda "return remap(tilt, float(1), float(0), id(attic_return_opened), id(attic_return_closed));" }  }
    tilt_lambda: !lambda "return remap(id(attic_return_servo_potentiometer).state, id(attic_return_upper), id(attic_return_lower), float(1), float(0));"
    lambda: "return id(attic_return_servo_potentiometer).state < ( id(attic_return_lower) + float(0.1))  ? COVER_CLOSED : COVER_OPEN;"
  - platform: template
    device_class: damper
    id: attic_supply_vent
    name: attic supply vent
    open_action: { servo.write: { id: attic_supply_servo, level: !lambda "return id(attic_supply_opened);" } }
    close_action: { servo.write: { id: attic_supply_servo, level: !lambda "return  id(attic_supply_closed);" } }
    tilt_action: { servo.write: { id: attic_supply_servo, level: !lambda "return remap(tilt, float(1), float(0), id(attic_supply_opened), id(attic_supply_closed));" }  }
    tilt_lambda: !lambda "return remap(id(attic_supply_servo_potentiometer).state, id(attic_supply_upper), id(attic_supply_lower), float(1), float(0));"
    lambda: "return id(attic_supply_servo_potentiometer).state < ( id(attic_supply_lower) + float(0.1))  ? COVER_CLOSED : COVER_OPEN;"

fan:
  - platform: speed
    output: erv_in_l
    id: erv_fan_in
    restore_mode: ALWAYS_ON 
  - platform: speed
    output: erv_out_l
    id: erv_fan_out
    restore_mode: ALWAYS_ON 

sensor:
  - platform: uptime
    type: seconds
    name: "$device_name Uptime"
  - { platform: adc, id: attic_return_servo_potentiometer, pin: GPIO4, update_interval: 250ms, attenuation: 12db }
  - { platform: adc, id: attic_supply_servo_potentiometer, pin: GPIO5, update_interval: 250ms, attenuation: 12db }

servo:
  - { id: attic_return_servo, output: attic_return_servo_output, transition_length: 5s, auto_detach_time: 1000ms, max_level: 60%, min_level: 5%}
  - { id: attic_supply_servo, output: attic_supply_servo_output, transition_length: 5s, auto_detach_time: 1000ms, max_level: 60%, min_level: 5%}

output:
  - {platform: ledc, id: attic_return_servo_output, pin: GPIO14, frequency: 200Hz}
  - {platform: ledc, id: attic_supply_servo_output, pin: GPIO13, frequency: 200Hz}
  - {platform: ledc, id: erv_in_l, pin: GPIO12, frequency: 19531Hz}
  - {platform: ledc, id: erv_out_l, pin: GPIO11, frequency: 19531Hz}

# status_led:
#   pin: $led

light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO48
    num_leds: 1
    rmt_channel: 0
    chipset: ws2812
    name: "$device_name Light"


script:
  - id: eval_erv_state
    mode: single 
    then:
      - lambda: |-
          if((id(bathroom_vent_call).state || id(kitchen_vent_call).state || id(shop_vent_call).state) && !id(erv_hs)){
              id(erv_hs) = true;
              id(erv_hs_since) = millis();
              auto call = id(erv_fan_in).turn_on();
              call.set_speed(id(erv_hs_speed));
              call.perform();
          }
          if(id(erv_hs)){
            auto now = millis();
            if(now > id(erv_hs_since) + 14'400'000){ // 4 hours
              auto call = id(erv_fan_in).turn_on();
              call.set_speed(id(erv_ls_speed));
              call.perform();
            }
          }



canbus:
  - platform: esp32_can
    tx_pin: GPIO6
    rx_pin: GPIO7
    can_id: 1
    bit_rate: 125KBPS
    on_frame:
      - can_id: 2
        then:
          - lambda: |-
              if(x.size() > 0) {
                switch(x[0]) {
                  case 0b1000'0001:  // bathroom vent request start
                    id(bathroom_vent_call).publish_state(true); break;
                  case 0b0000'0001:  // bathroom vent request end
                    id(bathroom_vent_call).publish_state(false); break;

                  case 0b1000'0010:  // kitchen vent request start
                    id(kitchen_vent_call).turn_on(); break;
                  case 0b0000'0010:  // kitchen vent request end
                    id(kitchen_vent_call).turn_off(); break;

                  case 0b1000'0100:  // shop vent request start
                    id(shop_vent_call).turn_on(); break;
                  case 0b0000'0100:  // shop vent request end
                    id(shop_vent_call).turn_off(); break;
                }
              }
          - script.execute: eval_erv_state

# https://community.home-assistant.io/t/retain-switch-states-on-a-power-failure/181602/11
# add a toggle helper with the name esphome_${switch_name}
switch:
  - platform: template
    name: kitchen vent call remote
    id: kitchen_vent_call
    turn_on_action: 
      - script.execute: eval_erv_state
  - platform: template
    name: shop vent call remote
    id: shop_vent_call
    turn_on_action: 
      - script.execute: eval_erv_state
  - platform: gpio
    name: 'test plug'
    pin: GPIO10
    id: plg_1
    on_turn_on:
     - homeassistant.service:
        action: input_boolean.turn_on
        data:
         entity_id: input_boolean.esphome_${switch_name}
    on_turn_off:
     - homeassistant.service:
        action: input_boolean.turn_off
        data:
         entity_id: input_boolean.esphome_${switch_name}



binary_sensor:
  - platform: template
    name: bathroom vent call remote
    id: bathroom_vent_call
  - platform: homeassistant
    entity_id: input_boolean.esphome_${switch_name}
    id: esphome_${switch_name}
  - platform: status
    id: connection_status
    on_state:
      then:
        - delay: 3s
        - if:
            condition:
              - binary_sensor.is_on: esphome_${switch_name}
            then:
              - switch.turn_on: plg_1
            else:
              - switch.turn_off: plg_1