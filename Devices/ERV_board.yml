substitutions:
  device_name: erv-board
  DS18B20_01: "0x0a3c01d6077f2128"

# <<: !include one_wire_sensor_list.yml

external_components:
  - source:
      type: local
      path: ..\my_components # path relative to Devices folder

globals:
  - id: vent_3_setpoint
    type: float
  - id: servo_upper_travel
    type: float
    initial_value: '2.5'
  - id: servo_lower_travel
    type: float
    initial_value: '0'
  - id: opened_position
    type: float
    initial_value: '1'
  - id: closed_position
    type: float
    initial_value: '0'



esphome:
  name: $device_name
  platformio_options:
    board_build.2flash_mode: dio
  # on_boot:
  #   priority: -100
  #   then:
  #     lambda: !lambda |-
  #       // auto ven = id(vent);
  #       // ven->make_call().set_tilt(0.2);

  #       TaskHandle_t xHandle = NULL;
  #       auto fun = [](void* params) -> void {
  #         float current_position = 0.5;
  #         id(vent_servo)->write(current_position);
  #         // delay(1000);
  #         // auto movingDown = true;
  #         // while(movingDown){
  #         //   current_position -= 0.025;
  #         //   id(vent_servo)->write(current_position);
  #         //   delay(250);
  #         // }
  #       };

  #       xTaskCreate(fun, "circuit_task", 8192 * 2, (void*)NULL, 0, &xHandle);

  on_loop:
    lambda: !lambda |-
      if (id(vent_3_setpoint) > 0.25) {
      } else {
      }

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 8MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_8MB: y



preferences:
  # the default of 1min is far too short--flash chip is rated
  # for approx 100k writes.
  flash_write_interval: "48h"

api:
  # password: ""
ota:
  platform: esphome
  password: ""

logger:
  level: info


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "$device_name AP"
    password: "BiSG9yrKP394"
captive_portal:

time:
  - platform: homeassistant

button:
  - platform: restart
    name: "$device_name Restart"
  - platform: template
    id: run_call
    name: "home vent servo"
    on_press:
      then:
        lambda: !lambda |- 
          id(hard_damper)->setup();


text_sensor:
  - platform: version
    name: "$device_name Version"

web_server:
  version: 3
  sorting_groups:
    - id: sorting_group_time_settings
      name: "Time Settings"
      sorting_weight: 10
    - id: sorting_group_number_settings
      name: "Number settings"
      sorting_weight: 20

datetime:
  - platform: template
    id: my_datetime_time
    type: time
    name: "Pick a Time"
    optimistic: yes
    initial_value: "12:34:56"
    restore_value: true
    web_server:
      sorting_group_id: sorting_group_time_settings

number:
  - platform: template
    id: my_number
    name: "vent speed"
    optimistic: true
    min_value: 20
    max_value: 100
    step: 1
    web_server:
      sorting_group_id: sorting_group_number_settings

# dc_relay:
#   - id: dc_breaker_a
#     v_in_sensor: vin_raw

hard_stop_damper:
  - id: hard_damper
    upper_limit: servo_upper_travel
    lower_limit: servo_lower_travel
    open_position: opened_position
    close_position: closed_position
    servo_position_sensor: vent_servo_potentiometer
    servo: vent_servo
    open_at_center: true
    switch_open_and_close: false
    open_offset: -0.1

cover:
  - platform: template
    device_class: damper
    id: vent
    name: attic vent
    open_action:
      - servo.write:
          id: vent_servo
          level: !lambda 'return id(opened_position);'
    close_action:
      - servo.write:
          id: vent_servo
          level: !lambda 'return id(closed_position);'
    tilt_action:
      - servo.write:
          id: vent_servo
          level: !lambda 'return remap(tilt, float(1), float(0), id(opened_position), id(closed_position));'
          # level: !lambda 'return tilt;'
    # tilt_lambda: 'return remap(id(vent_servo_potentiometer).state, id(opened_potentiometer_position), id(closed_potentiometer_position), float(1), float(0));'
    tilt_lambda: 'return remap(id(vent_servo_potentiometer).state, id(servo_upper_travel), id(servo_lower_travel), float(1), float(0));'
    # tilt_lambda: 'return remap(id(vent_servo_potentiometer).state, float(0.0), float(3.3), float(0), float(1));'
    lambda: 'return id(vent_servo_potentiometer).state < ( id(servo_lower_travel) + float(0.1))  ? COVER_CLOSED : COVER_OPEN;'
  - platform: template
    device_class: damper
    id: vent2
    name: bathroom vent
    open_action:
      - servo.write:
          id: vent_servo2
          level: !lambda 'return 1;'
    close_action:
      - servo.write:
          id: vent_servo2
          level: !lambda 'return 0;'
    tilt_action:
      - servo.write:
          id: vent_servo2
          level: !lambda 'return tilt;'
    tilt_lambda: 'return id(vent_servo2_potentiometer).state;'
  - platform: template
    device_class: damper
    id: vent3
    name: template vent
    open_action:
    - globals.set:
        id: vent_3_setpoint
        value: !lambda 'return float(1);'
    close_action:
    - globals.set:
        id: vent_3_setpoint
        value: !lambda 'return float(0);'
    tilt_action:
    - globals.set:
        id: vent_3_setpoint
        value: !lambda 'return tilt;'
    tilt_lambda: 'return id(vent_servo2_potentiometer).state;'


fan:
  - platform: speed
    output: erv_in_l
    name: "ERV input low"
    internal: true
  - platform: speed
    output: erv_out_l
    name: "ERV output low"
    internal: true

# one_wire:
#   - platform: gpio
#     pin: GPIO8
#     id: one_wire_bus_a
  # - platform: gpio
  #   pin: $one_wire_b
  #   id: one_wire_bus_b


sensor:
  - platform: adc
    id: vent_servo_potentiometer
    name: "servo feedback"
    pin: GPIO4
    update_interval: 250ms
    attenuation: 12db
  - platform: adc
    id: vent_servo2_potentiometer
    pin: GPIO5
    update_interval: 250ms
    attenuation: 12db
  # - platform: dallas_temp
  #   address: $DS18B20_01
  #   name: "near wall temp 12 in"
  #   resolution: 10
  #   one_wire_id: one_wire_bus_a
  #   update_interval: 5s


servo:
  - id: vent_servo
    output: vent_servo_output
    transition_length: 5s
    auto_detach_time: 1000ms
    max_level: 60%
    min_level: 5%
  - id: vent_servo2
    output: vent_servo2_output
    transition_length: 5s
    auto_detach_time: 1000ms
    max_level: 60%
    min_level: 5%



output:
  - platform: ledc
    id: vent_servo_output
    pin: GPIO14
    frequency: 200 Hz
  - platform: ledc
    id: vent_servo2_output
    pin: GPIO13
    frequency: 200 Hz
  - platform: ledc
    pin: GPIO12
    id: erv_in_l
    frequency: 19531Hz
  - platform: ledc
    pin: GPIO11
    id: erv_out_l
    frequency: 19531Hz


# status_led:
#   pin: $led

light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO48
    num_leds: 1
    rmt_channel: 0
    chipset: ws2812
    name: "$device_name Light"


