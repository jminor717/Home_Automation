esphome:
  name: $devicename
  includes:
    - ../my_components/Segmented_Epaper.h

esp32:
  board: esp32-c6-devkitc-1
  variant: esp32c6
  framework:
    type: esp-idf
    version: 5.1.0
    platform_version: https://github.com/stintel/platform-espressif32#esp32-c6-test
# esp32:
#   board: esp32dev
#   framework:
#     type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: "MuskFi"
  password: "123456789"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "$devicename AP"
    password: "BiSG9yrKP394"

captive_portal:
    

i2c:
   - id: bus_a
     sda: $sda_pin
     scl: $scl_pin
     scan: true

# globals:
#   - id: last_rotary_state
#     type: float
#     restore_value: no
#     initial_value: '0'

sensor:
  - platform: sht4x
    update_interval: 30s
    i2c_id: bus_a
    temperature:
      name: "Temperature"
      id: temp
      unit_of_measurement: "°C"
      # filters:
      #   - lambda: return x * (9.0/5.0) + 32.0;
    humidity:
      name: "Relative Humidity"
      id: humid

  - platform: rotary_encoder
    id: dial
    pin_a: 
      number: $encode_pin_1
      mode: INPUT
    pin_b:
      number: $encode_pin_2
      mode: INPUT # _PULLUP external pull up resistor required
    on_clockwise:
      - lambda:
          auto newTemp = id(therm).target_temperature + (5.0/9.0);
          // ESP_LOGD("ccw", "old, %f,  new; %f,     OS; %f,   NS; %f", id(therm).target_temperature, newTemp, id(last_rotary_state), id(dial).state);
          ESP_LOGD("ccw", "old, %f,  new; %f", id(therm).target_temperature, newTemp);
          // id(last_rotary_state) = id(dial).state;
          auto call = id(therm).make_call();
          call.set_target_temperature(newTemp);
          call.perform();
    on_anticlockwise:
      - lambda:
          auto newTemp = id(therm).target_temperature - (5.0/9.0);
          ESP_LOGD("ccw", "old, %f,  new; %f", id(therm).target_temperature, newTemp);
          // id(last_rotary_state) = id(dial).state;
          auto call = id(therm).make_call();
          call.set_target_temperature(newTemp);
          call.perform();


switch:
  #heater
  - platform: gpio
    pin: $relay_pin
    id: heaterLow
    restore_mode: always_off
  - platform: gpio
    pin: $relay_pin2
    id: heaterHigh
    restore_mode: always_off


climate:
- platform: thermostat
  name: $thermostat_name
  sensor: temp
  id: therm
  default_preset: home
  supplemental_heating_delta: 3 °C
  startup_delay: True
  min_heating_off_time: 30s
  min_heating_run_time: 30s
  max_heating_run_time: 180s
  min_idle_time: 30s
  heat_action:
    - switch.turn_on: heaterLow
  supplemental_heating_action:
    - switch.turn_on: heaterHigh
  idle_action:
    - switch.turn_off: heaterLow
    - switch.turn_off: heaterHigh
  preset:
    - name: home
      default_target_temperature_low: 19 °C 
      mode: heat
    - name: away
      default_target_temperature_low: 10 °C 
      mode: heat
    - name: sleep
      default_target_temperature_low: 18 °C 
      mode: heat


custom_component:
- lambda: |-
    auto my_custom = new SegmentedEPaper(id(bus_a));
    return {my_custom};
  components:
  - id: my_custom_id

# output:
#   - platform: custom
#     type: float
#     lambda: |-
#       auto living_room_light_output = new DimmableLatchingRelay(5, 6, id(DimmerCompDimmer1));
#       App.register_component(living_room_light_output);
#       return {living_room_light_output};
#     outputs:
#       id: living_room_float

# climate:
#   - platform: thermostat
#     internal: false
#     id: therm
#     name: $thermostat_name
#     sensor: temp
#     # default_target_temperature_low: 19.444 °C
#     #heating config
#     heat_deadband: 0.1 °C
#     heat_overrun: 0.1 °C
#     min_heating_off_time: 60 s
#     min_heating_run_time: 60 s
#     heat_action:
#       switch.turn_on: heaterLow
#     supplemental_heating_action:
#       switch.turn_on: heaterHigh
#     max_heating_run_time: 90 min
#     supplemental_heating_delta: 2
#     #idle config
#     min_idle_time: 60 s
#     idle_action:
#       - switch.turn_off: heaterHigh
#       - switch.turn_off: heaterLow
    #away config
    # away_config:
    #     default_target_temperature_low: 15.555 °C

# climate:
#   - platform: thermostat
#     internal: false
#     id: therm
#     name: $thermostat_name
#     # unit_of_measurement: "°F"
#     sensor: temp
#     #heating config
#     heat_deadband: 0.1
#     heat_overrun: 0.1
#     min_heating_off_time: 60 s
#     min_heating_run_time: 60 s
#     heat_action:
#       switch.turn_on: heaterLow
#     supplemental_heating_action:
#       switch.turn_on: heaterHigh
#     max_heating_run_time: 90 min
#     supplemental_heating_delta: 2
#     #idle config
#     min_idle_time: 10 min
#     idle_action:
#       - switch.turn_off: heaterHigh
#       - switch.turn_off: heaterLow
#     preset:
#       # Custom preset
#       - name: A custom preset
#         default_target_temperature_low: 25
#         mode: HEAT